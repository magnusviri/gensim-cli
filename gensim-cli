#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Interactive command line tool to work with the Gensim library
"""

from pprint import pprint
import time
import gensim.downloader as api

__author__ = "James Reynolds"
__email__ = "magnusviri@me.com"
__copyright__ = "Copyright (c) 2023 James reynolds"
__license__ = "MIT"
__version__ = "1.0.0"


def confirm(_message):
    """
    Ask user to enter Y or N (case-insensitive).
    :return: True if the answer is Y.
    :rtype: bool
    """
    answer = ""
    while answer not in ["y", "n"]:
        answer = input(_message).lower()
    return answer == "y"


def choose_models():
    models = []
    print("Pick a model")
    info = api.info()
    for model_name, model_data in sorted(info["models"].items()):
        models.append(model_name)
    while True:
        for idx, model_name in enumerate(models):
            print(str(idx + 1) + ". " + model_name)
        choices = list(map(str, range(1, len(models) + 1))) + ["q", "x"]
        answer = ""
        while answer not in choices:
            answer = input("Enter a number, or e[x]it/[q]uit: ").lower()
        if answer == "x" or answer == "q":
            exit()
        else:
            model_name = models[int(answer) - 1]
            model_data = info["models"][model_name]
            print(
                "%s (%d records)\n%s"
                % (
                    model_name,
                    model_data.get("num_records", -1),
                    model_data["description"],
                )
            )
            confirmed = confirm(f"Choose this model [y/n]? ")
            if confirmed:
                start_time = time.time()
                model = api.load(model_name)
                execution_time = time.time() - start_time
                print(f"Model loaded in {execution_time:.4f} seconds.")
                return model_name, model


def get_word(prompt, number):
    while True:
        text = input(prompt).lower()
        words = text.split(" ")
        if len(words) == 1 and words[0] == "":
            return []
        elif number == 0:
            return words
        elif number == len(words):
            return words


def distance(model):
    while True:
        words = get_word("2 words (blank to return): ", 2)
        if len(words) == 0:
            return
        try:
            pprint(model.distance(words[0], words[1]))
        except KeyError as e:
            print(e)


def most_similar(model):
    while True:
        pwords = get_word("Postivie words (blank to return): ", 0)
        nwords = get_word("Negative words (blank to return): ", 0)
        if len(pwords) == 0 and len(nwords) == 0:
            return
        try:
            pprint(model.most_similar(positive=pwords, negative=nwords))
        except KeyError as e:
            print(e)


def most_similar_cosmul(model):
    while True:
        pwords = get_word("Postivie words (blank to return): ", 0)
        nwords = get_word("Negative words (blank to return): ", 0)
        if len(pwords) == 0 and len(nwords) == 0:
            return
        try:
            pprint(model.most_similar_cosmul(positive=pwords, negative=nwords))
        except KeyError as e:
            print(e)


def doesnt_match(model):
    while True:
        words = get_word("List of words (blank to return): ", 0)
        if len(words) == 0:
            return
        try:
            pprint(model.doesnt_match(words))
        except KeyError as e:
            print(e)


def closer_than(model):
    while True:
        words = get_word("2 words (blank to return): ", 2)
        if len(words) == 0:
            return
        try:
            pprint(model.closer_than(words[0], words[1]))
        except KeyError as e:
            print(e)


def main():
    model_name, model = choose_models()
    while True:
        forks = [
            ["Change Model", choose_models],
            ["Distance", distance],
            ["Most Similar", most_similar],
            ["Most Similar Cosmul", most_similar_cosmul],
            ["Doesnt Match", doesnt_match],
            ["Closer Than", closer_than],
        ]
        print(f"Current model: {model_name}")
        for idx, choice in enumerate(forks):
            print(str(idx + 1) + ". " + choice[0])
        choices = list(map(str, range(1, len(forks) + 1))) + ["q", "x"]
        answer = ""
        while answer not in choices:
            answer = input("Enter a number, or e[x]it/[q]uit: ").lower()
        if answer == "x" or answer == "q":
            exit()
        else:
            if answer == "1":
                model_name, model = forks[int(answer)-1][1]()
            else:
                forks[int(answer)-1][1](model)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        exit(1)
